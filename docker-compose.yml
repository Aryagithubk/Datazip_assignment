version: "3.9" # Specify the Compose file format version.

services:
  # Primary MySQL service which acts as the main database server.
  primary_mysql:
    container_name: primary_mysql # Name the container "primary_mysql" for easy reference.
    image: mysql:8.0 # Use the MySQL 8.0 image.
    hostname: primary_mysql # Set the container hostname to "primary_mysql".
    ports:
      - "3306:3306" # Expose port 3306 on both host and container.
    environment:
      MYSQL_ROOT_PASSWORD: root # Root password for MySQL.
      MYSQL_DATABASE: main # Create a default database named "main" at startup.
    # Enable Change Data Capture (CDC) by setting necessary MySQL replication options.
    command:
      - "--server-id=1" # Set a unique server identifier for replication.
      - "--log-bin=mysql-bin" # Enable binary logging (needed for replication and CDC).
      - "--binlog-format=ROW" # Use ROW format to record every change in each row.
      - "--gtid-mode=ON" # Enable Global Transaction Identifiers (GTIDs).
      - "--enforce-gtid-consistency=ON" # Ensure all transactions are GTID compliant.
      - "--local-infile=1" # Enable local data loading for importing files.
      - "--binlog_expire_logs_seconds=604800" # Set binary log expiration to 7 days (604800 seconds).
      - "--skip-host-cache" # Disable host cache for DNS resolution.
      - "--skip-name-resolve" # Disable DNS host name resolution to improve performance.
    volumes:
      - mysql-data:/var/lib/mysql # Mount persistent storage volume for MySQL data.
    networks:
      - mysql-cluster # Connect the container to the custom network "mysql-cluster".
    healthcheck:
    test: ["CMD", "mysql", "-h", "localhost", "-u", "root", "-proot", "-e", "SELECT 1"]
    interval: 10s
    timeout: 5s
    retries: 10


  # Service to initialize the replication (CDC) user.
  init-cdc-user:
    image: mysql:8.0 # Use the same MySQL 8.0 image for consistency.
    container_name: init_cdc_user # Name the container "init_cdc_user" for identification.
    depends_on:
      - primary_mysql # Ensure the primary MySQL service starts before creating the user.
    entrypoint: >
      bash -c "echo 'Creating replication user...';
               sleep 10;               # Wait for MySQL to finish initial setup.
               mysql -h primary_mysql -P 3306 -u root -proot -e \"
                 CREATE USER IF NOT EXISTS 'cdc_user'@'%' IDENTIFIED BY '2004';
                 GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'cdc_user'@'%';
                 FLUSH PRIVILEGES;\";
               echo 'Setting global binlog_row_metadata to FULL...';
               mysql -h primary_mysql -P 3306 -u root -proot -e \"SET GLOBAL binlog_row_metadata = 'FULL';\";
               echo 'Replication user created and global binlog_row_metadata set.'"
    networks:
      - mysql-cluster # Connect to the same MySQL network.
    restart: "no" # Do not restart this container automatically.

  # Service to load sample data into the main database.
  data-loader:
    image: ubuntu:20.04 # Use Ubuntu 20.04 for running the data loading commands.
    container_name: sample_data_loader # Name the container for clarity.
    depends_on:
      primary_mysql:
        condition: service_healthy # Wait until the primary MySQL container passes its healthcheck.
    entrypoint: >
      bash -c "apt-get update -qq && apt-get install -y mysql-client && \
      echo 'Waiting for MySQL to be ready...'; \
      until mysqladmin ping -h primary_mysql -P 3306 -u root -proot; do echo 'Waiting...'; sleep 2; done; \
      echo 'Creating table sample_table...'; \
      mysql -h primary_mysql -P 3306 -u root -proot main -e 'CREATE TABLE IF NOT EXISTS sample_table (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255));'; \
      echo 'Inserting sample data...'; \
      mysql -h primary_mysql -P 3306 -u root -proot main -e 'INSERT INTO sample_table (name) VALUES (\"sample_data\");'; \
      echo 'Data insertion complete!'; \
      tail -f /dev/null"
    restart: "no" # Do not restart this container after execution.
    networks:
      - mysql-cluster # Use the same network for connectivity.

  # Service to check for the existence and functionality of MySQL binary logs.
  binlog-checker:
    image: ubuntu:20.04 # Use Ubuntu 20.04 to run the binary log checking commands.
    container_name: binlog_checker # Name this container for identification.
    depends_on:
      - primary_mysql # Ensure primary MySQL is running before checking binlogs.
    entrypoint: >
      bash -c "export DEBIAN_FRONTEND=noninteractive && \
               apt-get update -qq && \
               apt-get install -y mysql-server-core-8.0 && \
               # Terminate any automatically started mysqld process in this container (if present).
               pkill mysqld || true && \
               sleep 10 && \
               echo 'Listing MySQL binaries in /usr/bin:' && ls -l /usr/bin/mysql* && \
               echo 'Attempting to run lomysqlbing:' && \
               # Attempt to execute mysqlbinlog command on the first binary log file.
               /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000001 || echo 'mysqlbinlog not found!'"
    volumes:
      - mysql-data:/var/lib/mysql # Mount the MySQL data volume to access binary logs.
    networks:
      - mysql-cluster # Connect to the same custom network.
    restart: "no" # Do not restart this container automatically.

  # Hive Metastore Service
  hive-metastore:
  image: apache/hive:4.0.0
  container_name: hive-metastore
  environment:
    - HIVE_METASTORE_URI=thrift://hive-metastore:9083 # URI to access Hive Metastore.
    - HIVE_METASTORE_DB=main # Database for the Hive Metastore.
    - HIVE_METASTORE_PASSWORD=root # Password for the metastore DB connection.
  volumes:
    - /home/arya/olake_project/hive-site.xml:/opt/hive/conf/hive-site.xml # Volume for Hive configuration.
    - ./logs:/opt/hive/logs # Volume for Hive logs.
  networks:
    - mysql-cluster # Connect to the same MySQL network for database access.
  ports:
    - "9083:9083" # Expose the Hive Metastore Thrift service port.
  depends_on:
    - primary_mysql # Wait for MySQL to be ready before starting Hive Metastore.
  entrypoint: >
    /bin/sh -c "
    echo 'Waiting for MySQL to be ready...';
    until mysql -h primary_mysql -u root -proot -e 'SELECT 1'; do echo 'Waiting...'; sleep 2; done;
    echo 'Starting Hive Metastore...';
    /opt/hive/bin/hive --service metastore
    "
  restart: "always" # Restart Hive Metastore if it crashes.
# Restart Hive Metastore if it crashes.

# Define the custom network for MySQL and Hive services.
networks:
  mysql-cluster:

# Define persistent volumes to store MySQL and Hive data.
volumes:
  mysql-data:
  hive-data:
